/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// OBADA account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="name">Account address associated name.</param>
        /// <param name="pubKey">Public key.</param>
        /// <param name="address">OBADA address.</param>
        /// <param name="balance">balance.</param>
        /// <param name="nftCount">nftCount.</param>
        public Account(string name = default(string), string pubKey = default(string), string address = default(string), AccountBalance balance = default(AccountBalance), long nftCount = default(long))
        {
            this.Name = name;
            this.PubKey = pubKey;
            this.Address = address;
            this.Balance = balance;
            this.NftCount = nftCount;
        }

        /// <summary>
        /// Account address associated name
        /// </summary>
        /// <value>Account address associated name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Public key
        /// </summary>
        /// <value>Public key</value>
        [DataMember(Name="pub_key", EmitDefaultValue=false)]
        public string PubKey { get; set; }

        /// <summary>
        /// OBADA address
        /// </summary>
        /// <value>OBADA address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public AccountBalance Balance { get; set; }

        /// <summary>
        /// Gets or Sets NftCount
        /// </summary>
        [DataMember(Name="nft_count", EmitDefaultValue=false)]
        public long NftCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PubKey: ").Append(PubKey).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  NftCount: ").Append(NftCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PubKey == input.PubKey ||
                    (this.PubKey != null &&
                    this.PubKey.Equals(input.PubKey))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.NftCount == input.NftCount ||
                    (this.NftCount != null &&
                    this.NftCount.Equals(input.NftCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PubKey != null)
                    hashCode = hashCode * 59 + this.PubKey.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.NftCount != null)
                    hashCode = hashCode * 59 + this.NftCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
