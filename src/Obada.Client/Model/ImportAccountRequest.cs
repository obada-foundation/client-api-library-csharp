/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// OBADA account import payload
    /// </summary>
    [DataContract]
    public partial class ImportAccountRequest :  IEquatable<ImportAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportAccountRequest" /> class.
        /// </summary>
        /// <param name="privateKey">OBADA account (required).</param>
        /// <param name="accountName">Associative account name.</param>
        public ImportAccountRequest(string privateKey = default(string), string accountName = default(string))
        {
            // to ensure "privateKey" is required (not null)
            if (privateKey == null)
            {
                throw new InvalidDataException("privateKey is a required property for ImportAccountRequest and cannot be null");
            }
            else
            {
                this.PrivateKey = privateKey;
            }

            this.AccountName = accountName;
        }

        /// <summary>
        /// OBADA account
        /// </summary>
        /// <value>OBADA account</value>
        [DataMember(Name="private_key", EmitDefaultValue=true)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Associative account name
        /// </summary>
        /// <value>Associative account name</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportAccountRequest {\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportAccountRequest);
        }

        /// <summary>
        /// Returns true if ImportAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportAccountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
