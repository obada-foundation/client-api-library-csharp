/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// Returns steps that used for DID generation
    /// </summary>
    [DataContract]
    public partial class GenerateObitDIDResponse :  IEquatable<GenerateObitDIDResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateObitDIDResponse" /> class.
        /// </summary>
        /// <param name="serialNumberHash">Serial Number Hash is sha256 of the Serial Number input.</param>
        /// <param name="usn">Universal Serial Number.</param>
        /// <param name="did">DID.</param>
        /// <param name="usnBase58">Base58.</param>
        public GenerateObitDIDResponse(string serialNumberHash = default(string), string usn = default(string), string did = default(string), string usnBase58 = default(string))
        {
            this.SerialNumberHash = serialNumberHash;
            this.Usn = usn;
            this.Did = did;
            this.UsnBase58 = usnBase58;
        }

        /// <summary>
        /// Serial Number Hash is sha256 of the Serial Number input
        /// </summary>
        /// <value>Serial Number Hash is sha256 of the Serial Number input</value>
        [DataMember(Name="serial_number_hash", EmitDefaultValue=false)]
        public string SerialNumberHash { get; set; }

        /// <summary>
        /// Universal Serial Number
        /// </summary>
        /// <value>Universal Serial Number</value>
        [DataMember(Name="usn", EmitDefaultValue=false)]
        public string Usn { get; set; }

        /// <summary>
        /// DID
        /// </summary>
        /// <value>DID</value>
        [DataMember(Name="did", EmitDefaultValue=false)]
        public string Did { get; set; }

        /// <summary>
        /// Base58
        /// </summary>
        /// <value>Base58</value>
        [DataMember(Name="usn_base58", EmitDefaultValue=false)]
        public string UsnBase58 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateObitDIDResponse {\n");
            sb.Append("  SerialNumberHash: ").Append(SerialNumberHash).Append("\n");
            sb.Append("  Usn: ").Append(Usn).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  UsnBase58: ").Append(UsnBase58).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateObitDIDResponse);
        }

        /// <summary>
        /// Returns true if GenerateObitDIDResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateObitDIDResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateObitDIDResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SerialNumberHash == input.SerialNumberHash ||
                    (this.SerialNumberHash != null &&
                    this.SerialNumberHash.Equals(input.SerialNumberHash))
                ) && 
                (
                    this.Usn == input.Usn ||
                    (this.Usn != null &&
                    this.Usn.Equals(input.Usn))
                ) && 
                (
                    this.Did == input.Did ||
                    (this.Did != null &&
                    this.Did.Equals(input.Did))
                ) && 
                (
                    this.UsnBase58 == input.UsnBase58 ||
                    (this.UsnBase58 != null &&
                    this.UsnBase58.Equals(input.UsnBase58))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumberHash != null)
                    hashCode = hashCode * 59 + this.SerialNumberHash.GetHashCode();
                if (this.Usn != null)
                    hashCode = hashCode * 59 + this.Usn.GetHashCode();
                if (this.Did != null)
                    hashCode = hashCode * 59 + this.Did.GetHashCode();
                if (this.UsnBase58 != null)
                    hashCode = hashCode * 59 + this.UsnBase58.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
