/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// Device Document
    /// </summary>
    [DataContract]
    public partial class DeviceDocument :  IEquatable<DeviceDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDocument" /> class.
        /// </summary>
        /// <param name="name">Associative name of device document (required).</param>
        /// <param name="documentFile">documentFile (required).</param>
        /// <param name="shouldEncrypt">If true then client helper will encrypt document with account key (default to true).</param>
        public DeviceDocument(string name = default(string), string documentFile = default(string), bool shouldEncrypt = true)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DeviceDocument and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "documentFile" is required (not null)
            if (documentFile == null)
            {
                throw new InvalidDataException("documentFile is a required property for DeviceDocument and cannot be null");
            }
            else
            {
                this.DocumentFile = documentFile;
            }

            // use default value if no "shouldEncrypt" provided
            if (shouldEncrypt == null)
            {
                this.ShouldEncrypt = true;
            }
            else
            {
                this.ShouldEncrypt = shouldEncrypt;
            }
        }

        /// <summary>
        /// Associative name of device document
        /// </summary>
        /// <value>Associative name of device document</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFile
        /// </summary>
        [DataMember(Name="document_file", EmitDefaultValue=true)]
        public string DocumentFile { get; set; }

        /// <summary>
        /// If true then client helper will encrypt document with account key
        /// </summary>
        /// <value>If true then client helper will encrypt document with account key</value>
        [DataMember(Name="should_encrypt", EmitDefaultValue=false)]
        public bool ShouldEncrypt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceDocument {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentFile: ").Append(DocumentFile).Append("\n");
            sb.Append("  ShouldEncrypt: ").Append(ShouldEncrypt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceDocument);
        }

        /// <summary>
        /// Returns true if DeviceDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DocumentFile == input.DocumentFile ||
                    (this.DocumentFile != null &&
                    this.DocumentFile.Equals(input.DocumentFile))
                ) && 
                (
                    this.ShouldEncrypt == input.ShouldEncrypt ||
                    (this.ShouldEncrypt != null &&
                    this.ShouldEncrypt.Equals(input.ShouldEncrypt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DocumentFile != null)
                    hashCode = hashCode * 59 + this.DocumentFile.GetHashCode();
                if (this.ShouldEncrypt != null)
                    hashCode = hashCode * 59 + this.ShouldEncrypt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
