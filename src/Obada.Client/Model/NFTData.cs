/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// NFTData
    /// </summary>
    [DataContract]
    public partial class NFTData :  IEquatable<NFTData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTData" /> class.
        /// </summary>
        /// <param name="trustAnchorToken">trustAnchorToken.</param>
        /// <param name="usn">usn.</param>
        /// <param name="checksum">checksum.</param>
        /// <param name="documents">documents.</param>
        public NFTData(string trustAnchorToken = default(string), string usn = default(string), string checksum = default(string), List<NFTDocument> documents = default(List<NFTDocument>))
        {
            this.TrustAnchorToken = trustAnchorToken;
            this.Usn = usn;
            this.Checksum = checksum;
            this.Documents = documents;
        }

        /// <summary>
        /// Gets or Sets TrustAnchorToken
        /// </summary>
        [DataMember(Name="trust_anchor_token", EmitDefaultValue=false)]
        public string TrustAnchorToken { get; set; }

        /// <summary>
        /// Gets or Sets Usn
        /// </summary>
        [DataMember(Name="usn", EmitDefaultValue=false)]
        public string Usn { get; set; }

        /// <summary>
        /// Gets or Sets Checksum
        /// </summary>
        [DataMember(Name="checksum", EmitDefaultValue=false)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<NFTDocument> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NFTData {\n");
            sb.Append("  TrustAnchorToken: ").Append(TrustAnchorToken).Append("\n");
            sb.Append("  Usn: ").Append(Usn).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NFTData);
        }

        /// <summary>
        /// Returns true if NFTData instances are equal
        /// </summary>
        /// <param name="input">Instance of NFTData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NFTData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrustAnchorToken == input.TrustAnchorToken ||
                    (this.TrustAnchorToken != null &&
                    this.TrustAnchorToken.Equals(input.TrustAnchorToken))
                ) && 
                (
                    this.Usn == input.Usn ||
                    (this.Usn != null &&
                    this.Usn.Equals(input.Usn))
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrustAnchorToken != null)
                    hashCode = hashCode * 59 + this.TrustAnchorToken.GetHashCode();
                if (this.Usn != null)
                    hashCode = hashCode * 59 + this.Usn.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
