/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// AccountBalance
    /// </summary>
    [DataContract]
    public partial class AccountBalance :  IEquatable<AccountBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBalance" /> class.
        /// </summary>
        /// <param name="denom">Denomination unit.</param>
        /// <param name="amount">amount.</param>
        public AccountBalance(string denom = default(string), string amount = default(string))
        {
            this.Denom = denom;
            this.Amount = amount;
        }

        /// <summary>
        /// Denomination unit
        /// </summary>
        /// <value>Denomination unit</value>
        [DataMember(Name="denom", EmitDefaultValue=false)]
        public string Denom { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountBalance {\n");
            sb.Append("  Denom: ").Append(Denom).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountBalance);
        }

        /// <summary>
        /// Returns true if AccountBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Denom == input.Denom ||
                    (this.Denom != null &&
                    this.Denom.Equals(input.Denom))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Denom != null)
                    hashCode = hashCode * 59 + this.Denom.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
