/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// OBADA record.
    /// </summary>
    [DataContract]
    public partial class Obit :  IEquatable<Obit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Obit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Obit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Obit" /> class.
        /// </summary>
        /// <param name="did">OBADA decentralized identifier.</param>
        /// <param name="usn">Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. .</param>
        /// <param name="owner">Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used..</param>
        /// <param name="manufacturer">Waiting more specific details from Rohi (required).</param>
        /// <param name="partNumber">Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160) (required).</param>
        /// <param name="serialNumberHash">Serial number hashed with sha256 hash function.</param>
        /// <param name="trustAnchorToken">JWT token from the trust anchor.</param>
        /// <param name="documents">Documents that are attached to Obit.</param>
        /// <param name="checksum">Hash calculated by SHA256 (previous Obit checksum + Obit data). .</param>
        public Obit(string did = default(string), string usn = default(string), string owner = default(string), string manufacturer = default(string), string partNumber = default(string), string serialNumberHash = default(string), string trustAnchorToken = default(string), List<Document> documents = default(List<Document>), string checksum = default(string))
        {
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new InvalidDataException("manufacturer is a required property for Obit and cannot be null");
            }
            else
            {
                this.Manufacturer = manufacturer;
            }

            // to ensure "partNumber" is required (not null)
            if (partNumber == null)
            {
                throw new InvalidDataException("partNumber is a required property for Obit and cannot be null");
            }
            else
            {
                this.PartNumber = partNumber;
            }

            this.Did = did;
            this.Usn = usn;
            this.Owner = owner;
            this.SerialNumberHash = serialNumberHash;
            this.TrustAnchorToken = trustAnchorToken;
            this.Documents = documents;
            this.Checksum = checksum;
        }

        /// <summary>
        /// OBADA decentralized identifier
        /// </summary>
        /// <value>OBADA decentralized identifier</value>
        [DataMember(Name="did", EmitDefaultValue=false)]
        public string Did { get; set; }

        /// <summary>
        /// Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. 
        /// </summary>
        /// <value>Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. </value>
        [DataMember(Name="usn", EmitDefaultValue=false)]
        public string Usn { get; set; }

        /// <summary>
        /// Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.
        /// </summary>
        /// <value>Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Waiting more specific details from Rohi
        /// </summary>
        /// <value>Waiting more specific details from Rohi</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)
        /// </summary>
        /// <value>Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)</value>
        [DataMember(Name="part_number", EmitDefaultValue=true)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Serial number hashed with sha256 hash function
        /// </summary>
        /// <value>Serial number hashed with sha256 hash function</value>
        [DataMember(Name="serial_number_hash", EmitDefaultValue=false)]
        public string SerialNumberHash { get; set; }

        /// <summary>
        /// JWT token from the trust anchor
        /// </summary>
        /// <value>JWT token from the trust anchor</value>
        [DataMember(Name="trust_anchor_token", EmitDefaultValue=false)]
        public string TrustAnchorToken { get; set; }

        /// <summary>
        /// Documents that are attached to Obit
        /// </summary>
        /// <value>Documents that are attached to Obit</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// Hash calculated by SHA256 (previous Obit checksum + Obit data). 
        /// </summary>
        /// <value>Hash calculated by SHA256 (previous Obit checksum + Obit data). </value>
        [DataMember(Name="checksum", EmitDefaultValue=false)]
        public string Checksum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Obit {\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  Usn: ").Append(Usn).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  SerialNumberHash: ").Append(SerialNumberHash).Append("\n");
            sb.Append("  TrustAnchorToken: ").Append(TrustAnchorToken).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Obit);
        }

        /// <summary>
        /// Returns true if Obit instances are equal
        /// </summary>
        /// <param name="input">Instance of Obit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Obit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Did == input.Did ||
                    (this.Did != null &&
                    this.Did.Equals(input.Did))
                ) && 
                (
                    this.Usn == input.Usn ||
                    (this.Usn != null &&
                    this.Usn.Equals(input.Usn))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.SerialNumberHash == input.SerialNumberHash ||
                    (this.SerialNumberHash != null &&
                    this.SerialNumberHash.Equals(input.SerialNumberHash))
                ) && 
                (
                    this.TrustAnchorToken == input.TrustAnchorToken ||
                    (this.TrustAnchorToken != null &&
                    this.TrustAnchorToken.Equals(input.TrustAnchorToken))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Did != null)
                    hashCode = hashCode * 59 + this.Did.GetHashCode();
                if (this.Usn != null)
                    hashCode = hashCode * 59 + this.Usn.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.SerialNumberHash != null)
                    hashCode = hashCode * 59 + this.SerialNumberHash.GetHashCode();
                if (this.TrustAnchorToken != null)
                    hashCode = hashCode * 59 + this.TrustAnchorToken.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
