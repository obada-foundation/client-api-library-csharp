/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// Mnemonic for seeding the wallet response
    /// </summary>
    [DataContract]
    public partial class MnemonicRequest :  IEquatable<MnemonicRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnemonicRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnemonicRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnemonicRequest" /> class.
        /// </summary>
        /// <param name="mnemonic">Mnemonic for seeding (required).</param>
        /// <param name="force">Flag that specify if exisiting wallet should be replaced, if false is send then error will be send back (default to false).</param>
        public MnemonicRequest(string mnemonic = default(string), bool force = false)
        {
            // to ensure "mnemonic" is required (not null)
            if (mnemonic == null)
            {
                throw new InvalidDataException("mnemonic is a required property for MnemonicRequest and cannot be null");
            }
            else
            {
                this.Mnemonic = mnemonic;
            }

            // use default value if no "force" provided
            if (force == null)
            {
                this.Force = false;
            }
            else
            {
                this.Force = force;
            }
        }

        /// <summary>
        /// Mnemonic for seeding
        /// </summary>
        /// <value>Mnemonic for seeding</value>
        [DataMember(Name="mnemonic", EmitDefaultValue=true)]
        public string Mnemonic { get; set; }

        /// <summary>
        /// Flag that specify if exisiting wallet should be replaced, if false is send then error will be send back
        /// </summary>
        /// <value>Flag that specify if exisiting wallet should be replaced, if false is send then error will be send back</value>
        [DataMember(Name="force", EmitDefaultValue=false)]
        public bool Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MnemonicRequest {\n");
            sb.Append("  Mnemonic: ").Append(Mnemonic).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnemonicRequest);
        }

        /// <summary>
        /// Returns true if MnemonicRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MnemonicRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnemonicRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mnemonic == input.Mnemonic ||
                    (this.Mnemonic != null &&
                    this.Mnemonic.Equals(input.Mnemonic))
                ) && 
                (
                    this.Force == input.Force ||
                    (this.Force != null &&
                    this.Force.Equals(input.Force))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mnemonic != null)
                    hashCode = hashCode * 59 + this.Mnemonic.GetHashCode();
                if (this.Force != null)
                    hashCode = hashCode * 59 + this.Force.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
