/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// Generate Obit checksum payload
    /// </summary>
    [DataContract]
    public partial class GenerateObitChecksumRequest :  IEquatable<GenerateObitChecksumRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateObitChecksumRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateObitChecksumRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateObitChecksumRequest" /> class.
        /// </summary>
        /// <param name="manufacturer">Manufacturer (Required) (required).</param>
        /// <param name="partNumber">Part Number (Required) (required).</param>
        /// <param name="serialNumber">Serial Number (Required) (required).</param>
        /// <param name="metadataUri">Metadata URI.</param>
        /// <param name="metadataUriHash">Metadata URI Hash.</param>
        /// <param name="trustAnchorToken">Trust Token.</param>
        public GenerateObitChecksumRequest(string manufacturer = default(string), string partNumber = default(string), string serialNumber = default(string), string metadataUri = default(string), string metadataUriHash = default(string), string trustAnchorToken = default(string))
        {
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new InvalidDataException("manufacturer is a required property for GenerateObitChecksumRequest and cannot be null");
            }
            else
            {
                this.Manufacturer = manufacturer;
            }

            // to ensure "partNumber" is required (not null)
            if (partNumber == null)
            {
                throw new InvalidDataException("partNumber is a required property for GenerateObitChecksumRequest and cannot be null");
            }
            else
            {
                this.PartNumber = partNumber;
            }

            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for GenerateObitChecksumRequest and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }

            this.MetadataUri = metadataUri;
            this.MetadataUriHash = metadataUriHash;
            this.TrustAnchorToken = trustAnchorToken;
        }

        /// <summary>
        /// Manufacturer (Required)
        /// </summary>
        /// <value>Manufacturer (Required)</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Part Number (Required)
        /// </summary>
        /// <value>Part Number (Required)</value>
        [DataMember(Name="part_number", EmitDefaultValue=true)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Serial Number (Required)
        /// </summary>
        /// <value>Serial Number (Required)</value>
        [DataMember(Name="serial_number", EmitDefaultValue=true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Metadata URI
        /// </summary>
        /// <value>Metadata URI</value>
        [DataMember(Name="metadata_uri", EmitDefaultValue=false)]
        public string MetadataUri { get; set; }

        /// <summary>
        /// Metadata URI Hash
        /// </summary>
        /// <value>Metadata URI Hash</value>
        [DataMember(Name="metadata_uri_hash", EmitDefaultValue=false)]
        public string MetadataUriHash { get; set; }

        /// <summary>
        /// Trust Token
        /// </summary>
        /// <value>Trust Token</value>
        [DataMember(Name="trust_anchor_token", EmitDefaultValue=false)]
        public string TrustAnchorToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateObitChecksumRequest {\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  MetadataUri: ").Append(MetadataUri).Append("\n");
            sb.Append("  MetadataUriHash: ").Append(MetadataUriHash).Append("\n");
            sb.Append("  TrustAnchorToken: ").Append(TrustAnchorToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateObitChecksumRequest);
        }

        /// <summary>
        /// Returns true if GenerateObitChecksumRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateObitChecksumRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateObitChecksumRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.MetadataUri == input.MetadataUri ||
                    (this.MetadataUri != null &&
                    this.MetadataUri.Equals(input.MetadataUri))
                ) && 
                (
                    this.MetadataUriHash == input.MetadataUriHash ||
                    (this.MetadataUriHash != null &&
                    this.MetadataUriHash.Equals(input.MetadataUriHash))
                ) && 
                (
                    this.TrustAnchorToken == input.TrustAnchorToken ||
                    (this.TrustAnchorToken != null &&
                    this.TrustAnchorToken.Equals(input.TrustAnchorToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.MetadataUri != null)
                    hashCode = hashCode * 59 + this.MetadataUri.GetHashCode();
                if (this.MetadataUriHash != null)
                    hashCode = hashCode * 59 + this.MetadataUriHash.GetHashCode();
                if (this.TrustAnchorToken != null)
                    hashCode = hashCode * 59 + this.TrustAnchorToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
