/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// Accounts
    /// </summary>
    [DataContract]
    public partial class Accounts :  IEquatable<Accounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Accounts" /> class.
        /// </summary>
        /// <param name="hdAccounts">hdAccounts.</param>
        /// <param name="importedAccounts">importedAccounts.</param>
        public Accounts(List<Account> hdAccounts = default(List<Account>), List<Account> importedAccounts = default(List<Account>))
        {
            this.HdAccounts = hdAccounts;
            this.ImportedAccounts = importedAccounts;
        }

        /// <summary>
        /// Gets or Sets HdAccounts
        /// </summary>
        [DataMember(Name="hd_accounts", EmitDefaultValue=false)]
        public List<Account> HdAccounts { get; set; }

        /// <summary>
        /// Gets or Sets ImportedAccounts
        /// </summary>
        [DataMember(Name="imported_accounts", EmitDefaultValue=false)]
        public List<Account> ImportedAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Accounts {\n");
            sb.Append("  HdAccounts: ").Append(HdAccounts).Append("\n");
            sb.Append("  ImportedAccounts: ").Append(ImportedAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Accounts);
        }

        /// <summary>
        /// Returns true if Accounts instances are equal
        /// </summary>
        /// <param name="input">Instance of Accounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Accounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HdAccounts == input.HdAccounts ||
                    this.HdAccounts != null &&
                    input.HdAccounts != null &&
                    this.HdAccounts.SequenceEqual(input.HdAccounts)
                ) && 
                (
                    this.ImportedAccounts == input.ImportedAccounts ||
                    this.ImportedAccounts != null &&
                    input.ImportedAccounts != null &&
                    this.ImportedAccounts.SequenceEqual(input.ImportedAccounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HdAccounts != null)
                    hashCode = hashCode * 59 + this.HdAccounts.GetHashCode();
                if (this.ImportedAccounts != null)
                    hashCode = hashCode * 59 + this.ImportedAccounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
