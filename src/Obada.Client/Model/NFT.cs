/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// OBADA NFT
    /// </summary>
    [DataContract]
    public partial class NFT :  IEquatable<NFT>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NFT" /> class.
        /// </summary>
        /// <param name="classId">classId.</param>
        /// <param name="id">id.</param>
        /// <param name="uri">uri.</param>
        /// <param name="uriHash">uriHash.</param>
        /// <param name="data">data.</param>
        public NFT(string classId = default(string), string id = default(string), string uri = default(string), string uriHash = default(string), NFTData data = default(NFTData))
        {
            this.ClassId = classId;
            this.Id = id;
            this.Uri = uri;
            this.UriHash = uriHash;
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets ClassId
        /// </summary>
        [DataMember(Name="class_id", EmitDefaultValue=false)]
        public string ClassId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets UriHash
        /// </summary>
        [DataMember(Name="uri_hash", EmitDefaultValue=false)]
        public string UriHash { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public NFTData Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NFT {\n");
            sb.Append("  ClassId: ").Append(ClassId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  UriHash: ").Append(UriHash).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NFT);
        }

        /// <summary>
        /// Returns true if NFT instances are equal
        /// </summary>
        /// <param name="input">Instance of NFT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NFT input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClassId == input.ClassId ||
                    (this.ClassId != null &&
                    this.ClassId.Equals(input.ClassId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.UriHash == input.UriHash ||
                    (this.UriHash != null &&
                    this.UriHash.Equals(input.UriHash))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassId != null)
                    hashCode = hashCode * 59 + this.ClassId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.UriHash != null)
                    hashCode = hashCode * 59 + this.UriHash.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
