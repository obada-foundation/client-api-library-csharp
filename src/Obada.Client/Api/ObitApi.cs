/* 
 * OBADA Client Helper API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Obada.Client.Client;
using Obada.Client.Model;

namespace Obada.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObitApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Obit from Blockchain
        /// </summary>
        /// <remarks>
        /// Downloads the Obit information from the blockchain to the client.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ClientObitResponse</returns>
        ClientObitResponse DownloadObitFromChain (ObitDid obitDid = default(ObitDid));

        /// <summary>
        /// Download Obit from Blockchain
        /// </summary>
        /// <remarks>
        /// Downloads the Obit information from the blockchain to the client.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        ApiResponse<ClientObitResponse> DownloadObitFromChainWithHttpInfo (ObitDid obitDid = default(ObitDid));
        /// <summary>
        /// Get Obit From Blockchain
        /// </summary>
        /// <remarks>
        /// Retrieves Obit information from blockchain but does not download it.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>BlockChainObitResponse</returns>
        BlockChainObitResponse FetchObitFromChain (string obitDid);

        /// <summary>
        /// Get Obit From Blockchain
        /// </summary>
        /// <remarks>
        /// Retrieves Obit information from blockchain but does not download it.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ApiResponse of BlockChainObitResponse</returns>
        ApiResponse<BlockChainObitResponse> FetchObitFromChainWithHttpInfo (string obitDid);
        /// <summary>
        /// Generate Obit Definition
        /// </summary>
        /// <remarks>
        /// Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <returns>ObitDefinitionResponse</returns>
        ObitDefinitionResponse GenerateObitDef (string manufacturer, string partNumber, string serialNumber);

        /// <summary>
        /// Generate Obit Definition
        /// </summary>
        /// <remarks>
        /// Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <returns>ApiResponse of ObitDefinitionResponse</returns>
        ApiResponse<ObitDefinitionResponse> GenerateObitDefWithHttpInfo (string manufacturer, string partNumber, string serialNumber);
        /// <summary>
        /// Generates The Root Hash using the data provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>RootHashResponse</returns>
        RootHashResponse GenerateRootHash (LocalObit localObit = default(LocalObit));

        /// <summary>
        /// Generates The Root Hash using the data provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ApiResponse of RootHashResponse</returns>
        ApiResponse<RootHashResponse> GenerateRootHashWithHttpInfo (LocalObit localObit = default(LocalObit));
        /// <summary>
        /// Get Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ClientObitResponse</returns>
        ClientObitResponse GetClientObit (string obitDid);

        /// <summary>
        /// Get Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        ApiResponse<ClientObitResponse> GetClientObitWithHttpInfo (string obitDid);
        /// <summary>
        /// Save Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ClientObitResponse</returns>
        ClientObitResponse SaveClientObit (LocalObit localObit = default(LocalObit));

        /// <summary>
        /// Save Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        ApiResponse<ClientObitResponse> SaveClientObitWithHttpInfo (LocalObit localObit = default(LocalObit));
        /// <summary>
        /// Upload Obit to Blockchain
        /// </summary>
        /// <remarks>
        /// Uploads Obit from client to the Blockchain
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>BaseResponse</returns>
        BaseResponse UploadObit (ObitDid obitDid = default(ObitDid));

        /// <summary>
        /// Upload Obit to Blockchain
        /// </summary>
        /// <remarks>
        /// Uploads Obit from client to the Blockchain
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        ApiResponse<BaseResponse> UploadObitWithHttpInfo (ObitDid obitDid = default(ObitDid));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download Obit from Blockchain
        /// </summary>
        /// <remarks>
        /// Downloads the Obit information from the blockchain to the client.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        System.Threading.Tasks.Task<ClientObitResponse> DownloadObitFromChainAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download Obit from Blockchain
        /// </summary>
        /// <remarks>
        /// Downloads the Obit information from the blockchain to the client.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> DownloadObitFromChainWithHttpInfoAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Obit From Blockchain
        /// </summary>
        /// <remarks>
        /// Retrieves Obit information from blockchain but does not download it.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockChainObitResponse</returns>
        System.Threading.Tasks.Task<BlockChainObitResponse> FetchObitFromChainAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Obit From Blockchain
        /// </summary>
        /// <remarks>
        /// Retrieves Obit information from blockchain but does not download it.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockChainObitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockChainObitResponse>> FetchObitFromChainWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate Obit Definition
        /// </summary>
        /// <remarks>
        /// Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ObitDefinitionResponse</returns>
        System.Threading.Tasks.Task<ObitDefinitionResponse> GenerateObitDefAsync (string manufacturer, string partNumber, string serialNumber, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate Obit Definition
        /// </summary>
        /// <remarks>
        /// Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ObitDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObitDefinitionResponse>> GenerateObitDefWithHttpInfoAsync (string manufacturer, string partNumber, string serialNumber, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generates The Root Hash using the data provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RootHashResponse</returns>
        System.Threading.Tasks.Task<RootHashResponse> GenerateRootHashAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generates The Root Hash using the data provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RootHashResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootHashResponse>> GenerateRootHashWithHttpInfoAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        System.Threading.Tasks.Task<ClientObitResponse> GetClientObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> GetClientObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Save Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        System.Threading.Tasks.Task<ClientObitResponse> SaveClientObitAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Save Client Obit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> SaveClientObitWithHttpInfoAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upload Obit to Blockchain
        /// </summary>
        /// <remarks>
        /// Uploads Obit from client to the Blockchain
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseResponse</returns>
        System.Threading.Tasks.Task<BaseResponse> UploadObitAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upload Obit to Blockchain
        /// </summary>
        /// <remarks>
        /// Uploads Obit from client to the Blockchain
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseResponse>> UploadObitWithHttpInfoAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObitApi : IObitApi
    {
        private Obada.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObitApi(String basePath)
        {
            this.Configuration = new Obada.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObitApi()
        {
            this.Configuration = Obada.Client.Client.Configuration.Default;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObitApi(Obada.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Obada.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Obada.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Obada.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download Obit from Blockchain Downloads the Obit information from the blockchain to the client.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ClientObitResponse</returns>
        public ClientObitResponse DownloadObitFromChain (ObitDid obitDid = default(ObitDid))
        {
             ApiResponse<ClientObitResponse> localVarResponse = DownloadObitFromChainWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Obit from Blockchain Downloads the Obit information from the blockchain to the client.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        public ApiResponse<ClientObitResponse> DownloadObitFromChainWithHttpInfo (ObitDid obitDid = default(ObitDid))
        {

            var localVarPath = "/api/server/obit/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null && obitDid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obitDid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obitDid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadObitFromChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Download Obit from Blockchain Downloads the Obit information from the blockchain to the client.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        public async System.Threading.Tasks.Task<ClientObitResponse> DownloadObitFromChainAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ClientObitResponse> localVarResponse = await DownloadObitFromChainWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Obit from Blockchain Downloads the Obit information from the blockchain to the client.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> DownloadObitFromChainWithHttpInfoAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/server/obit/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null && obitDid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obitDid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obitDid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadObitFromChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Get Obit From Blockchain Retrieves Obit information from blockchain but does not download it.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>BlockChainObitResponse</returns>
        public BlockChainObitResponse FetchObitFromChain (string obitDid)
        {
             ApiResponse<BlockChainObitResponse> localVarResponse = FetchObitFromChainWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Obit From Blockchain Retrieves Obit information from blockchain but does not download it.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ApiResponse of BlockChainObitResponse</returns>
        public ApiResponse<BlockChainObitResponse> FetchObitFromChainWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->FetchObitFromChain");

            var localVarPath = "/api/server/obit/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchObitFromChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockChainObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockChainObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockChainObitResponse)));
        }

        /// <summary>
        /// Get Obit From Blockchain Retrieves Obit information from blockchain but does not download it.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BlockChainObitResponse</returns>
        public async System.Threading.Tasks.Task<BlockChainObitResponse> FetchObitFromChainAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BlockChainObitResponse> localVarResponse = await FetchObitFromChainWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Obit From Blockchain Retrieves Obit information from blockchain but does not download it.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BlockChainObitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockChainObitResponse>> FetchObitFromChainWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->FetchObitFromChain");

            var localVarPath = "/api/server/obit/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchObitFromChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockChainObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockChainObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockChainObitResponse)));
        }

        /// <summary>
        /// Generate Obit Definition Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <returns>ObitDefinitionResponse</returns>
        public ObitDefinitionResponse GenerateObitDef (string manufacturer, string partNumber, string serialNumber)
        {
             ApiResponse<ObitDefinitionResponse> localVarResponse = GenerateObitDefWithHttpInfo(manufacturer, partNumber, serialNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Obit Definition Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <returns>ApiResponse of ObitDefinitionResponse</returns>
        public ApiResponse<ObitDefinitionResponse> GenerateObitDefWithHttpInfo (string manufacturer, string partNumber, string serialNumber)
        {
            // verify the required parameter 'manufacturer' is set
            if (manufacturer == null)
                throw new ApiException(400, "Missing required parameter 'manufacturer' when calling ObitApi->GenerateObitDef");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ObitApi->GenerateObitDef");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling ObitApi->GenerateObitDef");

            var localVarPath = "/api/obit/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (manufacturer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer", manufacturer)); // query parameter
            if (partNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "part_number", partNumber)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateObitDef", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObitDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObitDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObitDefinitionResponse)));
        }

        /// <summary>
        /// Generate Obit Definition Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ObitDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<ObitDefinitionResponse> GenerateObitDefAsync (string manufacturer, string partNumber, string serialNumber, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ObitDefinitionResponse> localVarResponse = await GenerateObitDefWithHttpInfoAsync(manufacturer, partNumber, serialNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Obit Definition Returns the Obit Definition for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manufacturer">Device Id (Required)</param>
        /// <param name="partNumber">Part Number (Required)</param>
        /// <param name="serialNumber">Serial Number (Required)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ObitDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObitDefinitionResponse>> GenerateObitDefWithHttpInfoAsync (string manufacturer, string partNumber, string serialNumber, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'manufacturer' is set
            if (manufacturer == null)
                throw new ApiException(400, "Missing required parameter 'manufacturer' when calling ObitApi->GenerateObitDef");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling ObitApi->GenerateObitDef");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling ObitApi->GenerateObitDef");

            var localVarPath = "/api/obit/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (manufacturer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer", manufacturer)); // query parameter
            if (partNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "part_number", partNumber)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateObitDef", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObitDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObitDefinitionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObitDefinitionResponse)));
        }

        /// <summary>
        /// Generates The Root Hash using the data provided. 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>RootHashResponse</returns>
        public RootHashResponse GenerateRootHash (LocalObit localObit = default(LocalObit))
        {
             ApiResponse<RootHashResponse> localVarResponse = GenerateRootHashWithHttpInfo(localObit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates The Root Hash using the data provided. 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ApiResponse of RootHashResponse</returns>
        public ApiResponse<RootHashResponse> GenerateRootHashWithHttpInfo (LocalObit localObit = default(LocalObit))
        {

            var localVarPath = "/api/obit/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localObit != null && localObit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localObit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localObit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateRootHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RootHashResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RootHashResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RootHashResponse)));
        }

        /// <summary>
        /// Generates The Root Hash using the data provided. 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RootHashResponse</returns>
        public async System.Threading.Tasks.Task<RootHashResponse> GenerateRootHashAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RootHashResponse> localVarResponse = await GenerateRootHashWithHttpInfoAsync(localObit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates The Root Hash using the data provided. 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RootHashResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RootHashResponse>> GenerateRootHashWithHttpInfoAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/obit/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localObit != null && localObit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localObit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localObit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateRootHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RootHashResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RootHashResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RootHashResponse)));
        }

        /// <summary>
        /// Get Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ClientObitResponse</returns>
        public ClientObitResponse GetClientObit (string obitDid)
        {
             ApiResponse<ClientObitResponse> localVarResponse = GetClientObitWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        public ApiResponse<ClientObitResponse> GetClientObitWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->GetClientObit");

            var localVarPath = "/api/client/obit/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Get Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        public async System.Threading.Tasks.Task<ClientObitResponse> GetClientObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ClientObitResponse> localVarResponse = await GetClientObitWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">Required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> GetClientObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->GetClientObit");

            var localVarPath = "/api/client/obit/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Save Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ClientObitResponse</returns>
        public ClientObitResponse SaveClientObit (LocalObit localObit = default(LocalObit))
        {
             ApiResponse<ClientObitResponse> localVarResponse = SaveClientObitWithHttpInfo(localObit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <returns>ApiResponse of ClientObitResponse</returns>
        public ApiResponse<ClientObitResponse> SaveClientObitWithHttpInfo (LocalObit localObit = default(LocalObit))
        {

            var localVarPath = "/api/client/obit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localObit != null && localObit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localObit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localObit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveClientObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Save Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClientObitResponse</returns>
        public async System.Threading.Tasks.Task<ClientObitResponse> SaveClientObitAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ClientObitResponse> localVarResponse = await SaveClientObitWithHttpInfoAsync(localObit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save Client Obit 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localObit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClientObitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientObitResponse>> SaveClientObitWithHttpInfoAsync (LocalObit localObit = default(LocalObit), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/client/obit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localObit != null && localObit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(localObit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = localObit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveClientObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientObitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientObitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientObitResponse)));
        }

        /// <summary>
        /// Upload Obit to Blockchain Uploads Obit from client to the Blockchain
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>BaseResponse</returns>
        public BaseResponse UploadObit (ObitDid obitDid = default(ObitDid))
        {
             ApiResponse<BaseResponse> localVarResponse = UploadObitWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Obit to Blockchain Uploads Obit from client to the Blockchain
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <returns>ApiResponse of BaseResponse</returns>
        public ApiResponse<BaseResponse> UploadObitWithHttpInfo (ObitDid obitDid = default(ObitDid))
        {

            var localVarPath = "/api/server/obit/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null && obitDid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obitDid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obitDid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

        /// <summary>
        /// Upload Obit to Blockchain Uploads Obit from client to the Blockchain
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BaseResponse</returns>
        public async System.Threading.Tasks.Task<BaseResponse> UploadObitAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BaseResponse> localVarResponse = await UploadObitWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Obit to Blockchain Uploads Obit from client to the Blockchain
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BaseResponse>> UploadObitWithHttpInfoAsync (ObitDid obitDid = default(ObitDid), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/server/obit/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null && obitDid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obitDid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obitDid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BaseResponse)));
        }

    }
}
