/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Obada.Client.Client;
using Obada.Client.Model;

namespace Obada.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObitApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>Obit</returns>
        Obit Get (string key);

        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of Obit</returns>
        ApiResponse<Obit> GetWithHttpInfo (string key);
        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>History200Response</returns>
        History200Response History (string key);

        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of History200Response</returns>
        ApiResponse<History200Response> HistoryWithHttpInfo (string key);
        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <returns>Obit</returns>
        Obit Save (SaveObitRequest saveObitRequest = default(SaveObitRequest));

        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <returns>ApiResponse of Obit</returns>
        ApiResponse<Obit> SaveWithHttpInfo (SaveObitRequest saveObitRequest = default(SaveObitRequest));
        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \"searchTerm\".
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>Obits</returns>
        Obits Search (string q = default(string), int? offset = default(int?));

        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \"searchTerm\".
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of Obits</returns>
        ApiResponse<Obits> SearchWithHttpInfo (string q = default(string), int? offset = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        System.Threading.Tasks.Task<Obit> GetAsync (string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obit>> GetWithHttpInfoAsync (string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History200Response</returns>
        System.Threading.Tasks.Task<History200Response> HistoryAsync (string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<History200Response>> HistoryWithHttpInfoAsync (string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        System.Threading.Tasks.Task<Obit> SaveAsync (SaveObitRequest saveObitRequest = default(SaveObitRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obit>> SaveWithHttpInfoAsync (SaveObitRequest saveObitRequest = default(SaveObitRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \"searchTerm\".
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obits</returns>
        System.Threading.Tasks.Task<Obits> SearchAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \"searchTerm\".
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obits)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obits>> SearchWithHttpInfoAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObitApi : IObitApi
    {
        private Obada.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObitApi(String basePath)
        {
            this.Configuration = new Obada.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObitApi()
        {
            this.Configuration = Obada.Client.Client.Configuration.Default;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObitApi(Obada.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Obada.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Obada.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Obada.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>Obit</returns>
        public Obit Get (string key)
        {
             ApiResponse<Obit> localVarResponse = GetWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of Obit</returns>
        public ApiResponse<Obit> GetWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObitApi->Get");

            var localVarPath = "/obits/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        public async System.Threading.Tasks.Task<Obit> GetAsync (string key, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obit> localVarResponse = await GetWithHttpInfoAsync(key, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obit>> GetWithHttpInfoAsync (string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObitApi->Get");

            var localVarPath = "/obits/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>History200Response</returns>
        public History200Response History (string key)
        {
             ApiResponse<History200Response> localVarResponse = HistoryWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of History200Response</returns>
        public ApiResponse<History200Response> HistoryWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObitApi->History");

            var localVarPath = "/obits/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("History", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History200Response)));
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History200Response</returns>
        public async System.Threading.Tasks.Task<History200Response> HistoryAsync (string key, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<History200Response> localVarResponse = await HistoryWithHttpInfoAsync(key, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<History200Response>> HistoryWithHttpInfoAsync (string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ObitApi->History");

            var localVarPath = "/obits/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("History", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History200Response)));
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <returns>Obit</returns>
        public Obit Save (SaveObitRequest saveObitRequest = default(SaveObitRequest))
        {
             ApiResponse<Obit> localVarResponse = SaveWithHttpInfo(saveObitRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <returns>ApiResponse of Obit</returns>
        public ApiResponse<Obit> SaveWithHttpInfo (SaveObitRequest saveObitRequest = default(SaveObitRequest))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json:"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveObitRequest != null && saveObitRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(saveObitRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveObitRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Save", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        public async System.Threading.Tasks.Task<Obit> SaveAsync (SaveObitRequest saveObitRequest = default(SaveObitRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obit> localVarResponse = await SaveWithHttpInfoAsync(saveObitRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveObitRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obit>> SaveWithHttpInfoAsync (SaveObitRequest saveObitRequest = default(SaveObitRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json:"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saveObitRequest != null && saveObitRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(saveObitRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveObitRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Save", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \"searchTerm\".
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>Obits</returns>
        public Obits Search (string q = default(string), int? offset = default(int?))
        {
             ApiResponse<Obits> localVarResponse = SearchWithHttpInfo(q, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \"searchTerm\".
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of Obits</returns>
        public ApiResponse<Obits> SearchWithHttpInfo (string q = default(string), int? offset = default(int?))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obits)));
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \"searchTerm\".
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obits</returns>
        public async System.Threading.Tasks.Task<Obits> SearchAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obits> localVarResponse = await SearchWithHttpInfoAsync(q, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \"searchTerm\".
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obits)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obits>> SearchWithHttpInfoAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obits)));
        }

    }
}
