/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Obada.Client.Client;
using Obada.Client.Api;
using Obada.Client.Model;

namespace Obada.Client.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AccountsApi
            //Assert.IsInstanceOf(typeof(AccountsApi), instance);
        }

        
        /// <summary>
        /// Test Account
        /// </summary>
        [Test]
        public void AccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.Account(address);
            //Assert.IsInstanceOf(typeof(Account), response, "response is Account");
        }
        
        /// <summary>
        /// Test Accounts
        /// </summary>
        [Test]
        public void AccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Accounts();
            //Assert.IsInstanceOf(typeof(Accounts), response, "response is Accounts");
        }
        
        /// <summary>
        /// Test Balance
        /// </summary>
        [Test]
        public void BalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Balance();
            //Assert.IsInstanceOf(typeof(AccountBalance), response, "response is AccountBalance");
        }
        
        /// <summary>
        /// Test ExportAccount
        /// </summary>
        [Test]
        public void ExportAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExportAccountRequest exportAccountRequest = null;
            //var response = instance.ExportAccount(exportAccountRequest);
            //Assert.IsInstanceOf(typeof(ExportAccountResponse), response, "response is ExportAccountResponse");
        }
        
        /// <summary>
        /// Test GetMnemonic
        /// </summary>
        [Test]
        public void GetMnemonicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMnemonic();
            //Assert.IsInstanceOf(typeof(NewMnemonic), response, "response is NewMnemonic");
        }
        
        /// <summary>
        /// Test ImportAccount
        /// </summary>
        [Test]
        public void ImportAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImportAccountRequest importAccountRequest = null;
            //instance.ImportAccount(importAccountRequest);
            
        }
        
        /// <summary>
        /// Test ImportWallet
        /// </summary>
        [Test]
        public void ImportWalletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MnemonicRequest mnemonicRequest = null;
            //instance.ImportWallet(mnemonicRequest);
            
        }
        
        /// <summary>
        /// Test NewAccount
        /// </summary>
        [Test]
        public void NewAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountRequest accountRequest = null;
            //instance.NewAccount(accountRequest);
            
        }
        
        /// <summary>
        /// Test NewMnemonic
        /// </summary>
        [Test]
        public void NewMnemonicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NewMnemonic();
            //Assert.IsInstanceOf(typeof(NewMnemonic), response, "response is NewMnemonic");
        }
        
        /// <summary>
        /// Test NewWallet
        /// </summary>
        [Test]
        public void NewWalletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MnemonicRequest mnemonicRequest = null;
            //instance.NewWallet(mnemonicRequest);
            
        }
        
        /// <summary>
        /// Test Register
        /// </summary>
        [Test]
        public void RegisterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterRequest registerRequest = null;
            //var response = instance.Register(registerRequest);
            //Assert.IsInstanceOf(typeof(Profile), response, "response is Profile");
        }
        
        /// <summary>
        /// Test SendCoins
        /// </summary>
        [Test]
        public void SendCoinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //SendCoinsRequest sendCoinsRequest = null;
            //instance.SendCoins(address, sendCoinsRequest);
            
        }
        
        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Test]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //AccountRequest accountRequest = null;
            //instance.UpdateAccount(address, accountRequest);
            
        }
        
    }

}
